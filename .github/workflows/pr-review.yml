# =============================================================================
# AZURE OPENAI PR REVIEW WORKFLOW
# =============================================================================
# This GitHub Actions workflow automatically reviews Pull Requests using Azure OpenAI.
# 
# WORKFLOW TRIGGER:
# ----------------
# Executes when a Pull Request is:
# ‚Ä¢ opened (first time created)
# ‚Ä¢ synchronize (new commits pushed)  
# ‚Ä¢ reopened (closed PR reopened)
#
# EXECUTION FLOW:
# --------------
# 1. GitHub Event ‚Üí 2. Workflow Trigger ‚Üí 3. Docker Action ‚Üí 4. Python App ‚Üí 
# 5. Azure OpenAI Analysis ‚Üí 6. Structured Results ‚Üí 7. PR Comment
#
# SECURITY MODEL:
# --------------
# ‚Ä¢ Repository secrets store Azure OpenAI credentials securely
# ‚Ä¢ Workflow has minimal required permissions (read contents, write comments)
# ‚Ä¢ No secrets exposed in logs or outputs
# =============================================================================

name: PR Review with Azure OpenAI

# =============================================================================
# EVENT TRIGGER CONFIGURATION
# =============================================================================
# This workflow responds to specific Pull Request events:
# ‚Ä¢ opened: When a new PR is created
# ‚Ä¢ synchronize: When new commits are pushed to an existing PR  
# ‚Ä¢ reopened: When a previously closed PR is reopened
# =============================================================================
on:
  pull_request:
    types: [opened, synchronize, reopened]

# =============================================================================
# GITHUB TOKEN PERMISSIONS
# =============================================================================
# Explicitly define minimal required permissions for security:
# ‚Ä¢ contents: read     - Access repository files for analysis
# ‚Ä¢ pull-requests: write - Comment on the PR with review results
# ‚Ä¢ issues: write      - Create comments (PRs are special issues in GitHub API)
# 
# Note: These permissions are granted to the GITHUB_TOKEN automatically
# provided by GitHub Actions, not user credentials.
# =============================================================================
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # ===========================================================================
  # AI REVIEW JOB
  # ===========================================================================
  # Main job that orchestrates the entire AI review process
  # ===========================================================================
  ai-review:
    runs-on: ubuntu-latest
    name: AI Code Review
    
    steps:
      # -----------------------------------------------------------------------
      # STEP 1: REPOSITORY CHECKOUT
      # -----------------------------------------------------------------------
      # Downloads repository content so the action can access:
      # ‚Ä¢ Source code files for analysis
      # ‚Ä¢ The custom action definition (action.yml)
      # ‚Ä¢ Dockerfile for containerized execution
      #
      # fetch-depth: 0 ensures full git history is available
      # -----------------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # -----------------------------------------------------------------------
      # STEP 2: EXECUTE CUSTOM AZURE OPENAI ACTION
      # -----------------------------------------------------------------------
      # Runs our custom Docker action defined in ./action.yml
      # 
      # INPUT FLOW:
      # ‚Ä¢ Repository secrets ‚Üí Workflow inputs ‚Üí Action environment variables ‚Üí Python app
      # 
      # SECURITY NOTE:
      # ‚Ä¢ Secrets are injected as environment variables in the Docker container
      # ‚Ä¢ Never logged or exposed in GitHub Actions UI
      # ‚Ä¢ Automatically masked in any output
      #
      # OUTPUT CAPTURE:
      # ‚Ä¢ Results are captured with id: review for use in subsequent steps
      # ‚Ä¢ Outputs include: summary, score, approved, review_result (JSON)
      # -----------------------------------------------------------------------
      - name: Azure OpenAI PR Review
        id: review
        uses: ./  # Reference to local action.yml file
        with:
          # Azure OpenAI Service Configuration (from repository secrets)
          azure_openai_endpoint: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          azure_openai_api_key: ${{ secrets.AZURE_OPENAI_API_KEY }}
          azure_openai_deployment_name: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
          
          # AI Model Parameters (configurable)
          max_tokens: '1500'    # Maximum response length
          temperature: '0.1'    # Low temperature for consistent, focused reviews
      
      # -----------------------------------------------------------------------
      # STEP 3: POST AI REVIEW RESULTS TO PULL REQUEST
      # -----------------------------------------------------------------------
      # Takes the structured JSON output from the AI review and formats it
      # as a human-readable comment on the Pull Request.
      #
      # EXECUTION CONDITIONS:
      # ‚Ä¢ if: always() ensures this step runs even if the review step fails
      # ‚Ä¢ Provides fallback error handling and user communication
      #
      # GITHUB SCRIPT ACTION:
      # ‚Ä¢ Uses actions/github-script@v7 for GitHub API interaction
      # ‚Ä¢ Provides github REST API client and context objects
      # ‚Ä¢ Handles authentication automatically with GITHUB_TOKEN
      #
      # ERROR HANDLING STRATEGY:
      # ‚Ä¢ Primary: Parse review results and create formatted comment
      # ‚Ä¢ Fallback: If formatting fails, post basic error message with available data
      # ‚Ä¢ Ultimate: If all fails, set workflow status to failed
      # -----------------------------------------------------------------------
      - name: Comment on PR
        if: always()  # Run even if previous steps fail
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}  # GitHub API authentication
          script: |
            try {
              // ================================================================
              // PRIMARY COMMENT CREATION LOGIC
              // ================================================================
              // Parse the structured JSON output from the AI review step
              const reviewResult = JSON.parse('${{ steps.review.outputs.review_result }}');
              
              // Build formatted comment using GitHub Markdown with emojis for visual appeal
              let commentBody = `## ü§ñ AI Code Review\n\n`;
              
              // Header with overall assessment
              commentBody += `**Overall Score:** ${reviewResult.overall_score}/10\n`;
              commentBody += `**Status:** ${reviewResult.approved ? '‚úÖ Approved' : '‚ùå Changes Requested'}\n\n`;
              
              // AI-generated summary section
              commentBody += `### Summary\n${reviewResult.summary}\n\n`;
              
              // Detailed comments section (if any specific feedback provided)
              if (reviewResult.comments && reviewResult.comments.length > 0) {
                commentBody += `### Comments\n\n`;
                
                // Process each comment with severity-based emoji indicators
                for (const comment of reviewResult.comments) {
                  // Visual indicators based on severity level
                  const emoji = comment.severity === 'error' ? '‚ùå' :     // Critical issues
                               comment.severity === 'warning' ? '‚ö†Ô∏è' :   // Potential problems  
                               '‚ÑπÔ∏è';                                     // Informational
                  
                  // Format comment location (file:line or just file or general)
                  if (comment.filename && comment.line_number) {
                    commentBody += `${emoji} **${comment.filename}:${comment.line_number}**\n`;
                  } else if (comment.filename) {
                    commentBody += `${emoji} **${comment.filename}**\n`;
                  } else {
                    commentBody += `${emoji} **General**\n`;
                  }
                  
                  // Add the actual feedback message with proper indentation
                  commentBody += `  ${comment.message}\n\n`;
                }
              }
              
              // Footer attribution
              commentBody += `---\n*Generated by Azure OpenAI PR Review Agent*`;
              
              // ================================================================
              // POST COMMENT TO PULL REQUEST
              // ================================================================
              // Use GitHub REST API to create comment on the PR
              await github.rest.issues.createComment({
                issue_number: context.issue.number,    // PR number (PRs are issues in GitHub API)
                owner: context.repo.owner,             // Repository owner
                repo: context.repo.repo,               // Repository name
                body: commentBody                      // Formatted comment content
              });
              
              console.log('‚úÖ Review comment posted successfully');
              
            } catch (error) {
              // ================================================================
              // ERROR HANDLING AND FALLBACK LOGIC
              // ================================================================
              console.error('‚ùå Error posting review comment:', error);
              
              // Attempt to post a basic fallback comment with minimal information
              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ü§ñ AI Code Review\n\n‚ùå **Error:** Could not complete the review due to a technical issue.\n\nReview Score: ${{ steps.review.outputs.score }}/10\n\n---\n*Generated by Azure OpenAI PR Review Agent*`
                });
              } catch (fallbackError) {
                // If even the fallback fails, log error and fail the workflow
                console.error('‚ùå Failed to post fallback comment:', fallbackError);
                core.setFailed('Failed to post review comment');
              }
            }
